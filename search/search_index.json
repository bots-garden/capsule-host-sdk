{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsule Host SDK","text":"<p>What's new?</p> <ul> <li><code>v0.0.5</code>: \u2728 Helpers updated: <code>CallOnStart</code> and <code>CallOnStop</code> (they are executed from the same wasm module instance)</li> <li><code>v0.0.4</code>: \u2728 Helpers added: <code>CallOnStart</code> and <code>CallOnStop</code></li> <li><code>v0.0.3</code>: \u2728 Wazero update 1.2.0</li> <li><code>v0.0.2</code>: \u2728 Redis support</li> <li><code>v0.0.1</code>: \ud83c\udf89 first release</li> </ul>"},{"location":"#what-is-the-capsule-host-sdk-alias-capsule-hdk","title":"What is the Capsule Host SDK alias Capsule HDK?","text":"<p>Capsule HDK is a SDK to develop Golang Host applications able to run WASM modules developped with the Capsule MDK (WASM Module SDK). A Capsule application is a WebAssembly Module(or Function) Runner.</p> <p>The Capsule applications capsule-cli and capsule-http are both with this Capsule HDK: - capsule-cli, CLI. With capsule-cli, you can simply execute a WebAssembly Capsule module in a terminal - capsule-http, an HTTP server that serves WebAssembly Capsule modules</p> <p>The Capsule Host SDK is developed in GoLang and uses the \ud83d\udc9c Wazero project.</p> <p>Good to know</p> <ul> <li>\ud83e\udd17 a capsule application is \"small\" (capsule-http weighs 12M)</li> <li>\ud83d\udc33 a Capsule application is statically compiled: you can easily run it in a Distroless Docker container.</li> </ul>"},{"location":"#what-are-the-added-values-of-a-capsule-application","title":"What are the added values of a Capsule application?","text":"<p>A Capsule application brings superpowers to the WASM Capsule modules with host functions. Thanks to these host functions, a WASM Capsule module can, for example, prints a message, reads files, writes to files, makes HTTP requests, ... See the host functions section.</p> <p>Useful information for this project</p> <ul> <li>\ud83d\udd90 Issues: https://github.com/bots-garden/capsule-host-sdk/issues</li> <li>\ud83d\udea7 Milestones: https://github.com/bots-garden/capsule-host-sdk/milestones</li> <li>\ud83d\udce6 Releases: https://github.com/bots-garden/capsule-host-sdk/releases</li> </ul>"},{"location":"first-capsule-app/","title":"Developer Guide","text":"<p>\ud83d\udea7 this is a work in progress</p>"},{"location":"first-capsule-app/#first-capsule-application","title":"First Capsule Application","text":"<p>While waiting for the documentation, you can consult the examples present in this directory: /samples</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>\ud83d\udea7 this is a work in progress</p>"},{"location":"getting-started/#create-a-capsule-application","title":"Create a Capsule application","text":""},{"location":"helpers/","title":"\ud83e\uddf0 Helpers","text":"<p>\ud83d\udea7 this is a work in progress</p>"},{"location":"helpers/#call-onstart-exported-method-from-the-wasm-module","title":"Call OnStart exported method (from the wasm module)","text":"<p>introduced in v0.0.4</p> <pre><code>// Package main\npackage main\nimport (\n\"strconv\"\n\"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(func (param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nreturn capsule.HTTPResponse{\nTextBody: \"\ud83d\udc4b Hey\",\nHeaders: `{\"Content-Type\": \"text/plain; charset=utf-8\"}`,\nStatusCode: 200,\n}, nil\n})\n}\n// OnStart function\n//export OnStart\nfunc OnStart() {\ncapsule.Print(\"\ud83d\ude97 OnStart\")\n}\n</code></pre> <p>\ud83d\udc4b don't forget to export the <code>OnStart</code> function</p>"},{"location":"helpers/#call-onstop-exported-method-from-the-wasm-module","title":"Call OnStop exported method (from the wasm module)","text":"<p>introduced in v0.0.4</p> <pre><code>// Package main\npackage main\nimport (\n\"strconv\"\n\"github.com/bots-garden/capsule-module-sdk\"\n)\nfunc main() {\ncapsule.SetHandleHTTP(func (param capsule.HTTPRequest) (capsule.HTTPResponse, error) {\nreturn capsule.HTTPResponse{\nTextBody: \"\ud83d\udc4b Hey\",\nHeaders: `{\"Content-Type\": \"text/plain; charset=utf-8\"}`,\nStatusCode: 200,\n}, nil\n})\n}\n// OnStop function\n//export OnStop\nfunc OnStop() {\ncapsule.Print(\"\ud83d\ude99 OnStop\")\n}\n</code></pre> <p>\ud83d\udc4b don't forget to export the <code>OnStop</code> function</p>"},{"location":"host-functions/","title":"Host functions","text":"<p>\ud83d\udea7 this is a work in progress, each host function will be detailed with samples.</p> <p>The Capsule applications (and the Capsule HDK) offer some capabilities to the wasm modules by providing some \"host functions\".</p> <p>This is the list of the available host functions:</p> <ul> <li>Print a message: <code>Print(message string)</code>, usage: <code>capsule.Print(\"\ud83d\udc4b Hello Worls \ud83c\udf0d\")</code></li> <li>Log a message: <code>Log(message string)</code>, usage: <code>capsule.Log(\"\ud83d\ude21 something wrong\")</code></li> <li>Get the value of an environment variable: <code>GetEnv(variableName string) string</code>, usage: <code>capsule.GetEnv(\"MESSAGE\")</code></li> <li>Read a text file: <code>ReadFile(filePath string) ([]byte, error)</code>, usage: <code>data, err := capsule.ReadFile(\"./hello.txt\")</code></li> <li>Write a content to a text file: <code>WriteFile(filePath string, content []byte) error</code>, usage: <code>err := capsule.WriteFile(\"./hello.txt\", []byte(\"\ud83d\udc4b Hello World! \ud83c\udf0d\"))</code></li> <li>Make an HTTP request: <code>HTTP(request HTTPRequest) (HTTPResponse, error)</code>, usage: <code>respJSON, err := capsule.HTTP(capsule.HTTPRequest{})</code>, see the \"hey-people\" sample</li> <li>Memory Cache: see the \"mem-db\" sample</li> <li><code>CacheSet(key string, value []byte) []byte</code></li> <li><code>CacheGet(key string) ([]byte, error)</code></li> <li><code>CacheDel(key string) []byte</code></li> <li><code>CacheKeys(filter string) ([]string, error)</code> (right now, you can only use this filter: <code>*</code>)</li> <li>Redis Cache: see the \"redis-db\" sample</li> <li><code>RedisSet(key string, value []byte) ([]byte, error)</code></li> <li><code>RedisGet(key string) ([]byte, error)</code></li> <li><code>RedisDel(key string) ([]byte, error)</code></li> <li><code>RedisKeys(filter string) ([]string, error)</code></li> </ul>"}]}